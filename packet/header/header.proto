package header;

message DSROptions {
    // If route request sent, receiver must be broadcast and source must be
    // originating node, TTL can be used
    message RouteRequest {
        required uint32 id = 1; // Unique for sourse and destination
        required uint32 target = 2;
        repeated uint32 addresses = 3 [packed=true]; // ordered from initiator not including initiator
    }
    optional RouteRequest route_request = 1;

    // Source will be set to the node originating the reply
    // Destination will be the node who originated the request
    message RouteReply {
        repeated uint32 addresses = 1 [packed=true]; // ordered from initiator not including initiator
    }
    repeated RouteReply route_replies = 2;

    /*
       message RouteError {
       enum ErrorType {
       NODE_UNREACHABLE = 1;
    //FLOW_STATE_NOT_SUPPORTED = 2;
    //OPTION_NOT_SUPPORTED = 3;
    }
    required ErrorType error_type = 1; 
    required uint32 salvage = 2;
    required uint32 error_source = 3; // Node that discovered the link error.
    required uint32 error_destination = 4; // Node to which error must be delivered.

    }
     */
    message NodeUnreachableError {
        required uint32 salvage = 1;
        required uint32 source = 2;
        required uint32 destination = 3;
        required uint32 unreachable_node_address = 4;
    }
    repeated NodeUnreachableError node_unreachable_errors = 3;

    message AckRequest {
        required uint32 identification = 1; 
    }
    optional AckRequest ack_request = 4;

    message Ack {
        required uint32 identification = 1; 
        required uint32 source = 2; // node originating ack
        required uint32 destination = 3;
    }
    repeated Ack ack = 5;

    message SourceRoute {
        required uint32 salvage = 1;
        required uint32 segs_left = 2;
        repeated uint32 addresses = 3 [packed=true]; // ordered from initiator not including initiator
    }
    optional SourceRoute source_route = 6;
}

message FloodingOptions {

}

message Header {
    required uint32 Source = 1;
    optional uint32 SequenceNumber = 2;
    optional uint32 Receiver = 3;
    optional uint32 Destination = 4;
    optional uint64 PayloadOffset = 5;
    optional uint32 TTL = 6;

    oneof RoutingOptions {
        DSROptions dsr_options = 7;
        FloodingOptions flooding_options = 8;
    }
}
